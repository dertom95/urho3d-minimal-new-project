.template 0
echo "processing urho3d-components-header $(switches.topdir?"notopdir")"
function is_primitive(type)
    result = my.type="int"|my.type="float"|my.type="bool"
    return result
endfunction

function is_vector(type)
    return string.prefixed(my.type,"vector")
endfunction

function is_string(type)
    return string.prefixed(my.type,"string")
endfunction

function is_enum(type)
  return my.type="enum"
endfunction

function is_resource_ref(type)
  return my.type="resource_ref"
endfunction

function get_type_name(type)
    echo(my.type)
    if is_primitive(my.type)
        return my.type
    elsif is_vector(my.type) 
        return "$(my.Type)"
    elsif is_string(my.type)
        return "$(my.Type)"
    elsif is_enum(my.type)
        return "$(enum:)"
    elsif is_resource_ref(my.type)
        return "ResourceRef"
    else 
        abort("Unknown type:'$(type)'  Line:$(line)")
    endif
endfunction

function get_virtual(method)
    if (defined(my.method.virtual)&my.method.virtual="true") | (defined(my.method.override)&my.method.override="true")
        return "virtual "
    else
        return ""
    endif
endfunction

function get_params(method)
    _params=""
    for my.method.parameter
        if !first()
            _params+=","
        endif
        _params+="$(type:) $(name:)"
    endfor
    return _params
endfunction

function get_const(method)
    _const=""
    if defined(my.method.const) & my.method.const="true"
        _const=" const"
    endif
    return _const    
endfunction

function get_tag_text(tag)
    return "$(string.trim (my.tag.?''):no,left)"
endfunction

function get_method_signature_with_decorators(method)
    _override=""
    if defined(my.method.override) & my.method.override="true"
        _override=" override"
    endif
    return "$(get_virtual(my.method))$((my.method.return_type?"void"):) $(name:)($(get_params(my.method)))$(_override)$(get_const(my.method))"
endfunction


.endtemplate
.output "Generated/gen-comps.h"
.template 1
#pragma once

#include <Urho3D/Urho3DAll.h>

.for component
. if !defined(componentType)
.   component.componentType="Component"
. endif
. for field by name
.  field.expose = !defined(field.expose) | field.expose="true"
.  field.visibility = field.visibility ? "private"
.  if field.type="resource_ref" & !defined(field->gettersetter)
.  # always use gettersetter for resource_ref
.    new field.getterSetter
.    endnew
.  endif
.  if defined(field->getterSetter)
. # ------ GETTER SETTER -----------
.    new component.method
.      methodname = "$(field->getterSetter.getter_name ? ("Get"+field.Name))"
.      define method.name=methodname
.      define method.return_type="$(get_type_name(field.type))"
.      define method.const="true"
.      define method.is_getter="true"
.      define method.field_name="$(field.name:)"
.      field.gettername=methodname
.    endnew
.    new component.method
.      methodname = "$(field->getterSetter.setter_name ? ("Set"+field.Name))"
.      define method.name=methodname
.      define method.is_setter="true"
.      define method.field_name="$(field.name:)"
.      field.settername=methodname
.      new method.parameter
.        define parameter.name="value"
.        define parameter.type="$(get_type_name(field.type))"
.      endnew
.    endnew
.  else
.  echo "NO GETTER: $(field->getterSetter.getter_name?"")"   
.  endif
.  if !defined(type)
.   abort("No type for field:$(name) $(line)")
.  endif
.
.# ------- DEFAULT-VALUES -------
.
.  if is_primitive(type)
static const $(type:) default_$(component.name)_$(name) = $(default:);
.  elsif is_vector(type)
static const $(Type) default_$(component.name)_$(name)($(default:));
.  elsif is_string(type)
static const $(Type) default_$(component.name)_$(name) = "$(default:)";
.  elsif is_enum(type)
.  prefix = ""
.  if defined(item_prefix)
.   prefix = "$(item_prefix:)_"   
.  endif
enum $(enum:) {
.   for item
.    item_value = ""
.    if defined(value)
.     item_value = "=$(value:)"
.    endif
    $(prefix:)$(item.name:)$(item_value:),
.   endfor    
};
static const $(enum:) default_$(component.name)_$(name) = $(prefix:)$(default:);
.  elsif is_resource_ref(type)
static const ResourceRef default_$(component.name)_$(name)($(ref_type:)::GetTypeStatic(),"$((default??""):)");
.  else 
.  abort("Unknown type:'$(type)' line:$(line)")
.  endif
. endfor

class $(name:) : public $(component.componentType)
{
    URHO3D_OBJECT($(name:),$(component.componentType));

public:
    static void RegisterObject(Context *context);

    $(name:)(Context* ctx);
    virtual ~$(name:)();
.
.# ---------------- METHODS ----------------------
private:
.if defined(component.internaldata) & component.internaldata="true"
    struct InternalData;
    
    InternalData* data;
.endif

. for method where !defined(visibility)|visibility="private"
.  if first()
private:
.  endif
    // $(get_tag_text(method))
    $(get_method_signature_with_decorators(method));        
. endfor
.
. for method where visibility?="protected"
.  if first()
protected:
.  endif
    // $(get_tag_text(method))
    $(get_method_signature_with_decorators(method));        
. endfor

. for method where visibility?="public"
.  if first()
public:
.  endif
    // $(get_tag_text(method))
    $(get_method_signature_with_decorators(method));        
. endfor

.# ---------------- FIELDS --------------------------
.
. for field where visibility?="private"
.  if first()
private:
.  endif
    $("// "+get_tag_text(field) ? "")
    $(get_type_name(type)) $(name:)=default_$(component.name)_$(name);
. endfor

. for field where visibility?="protected"
.  if first()
protected:
.  endif
    // $(get_tag_text(field))
    $(get_type_name(type)) $(name:)=default_$(component.name)_$(name);
. endfor

. for field where visibility?="public"
.  if first()
public:
.  endif
    // $(get_tag_text(field))
    $(get_type_name(type)) $(name:)=default_$(component.name)_$(name);
. endfor
};
.echo component.string()
.endfor

void register_components(Context* ctx);
.endtemplate